{
  "fileTypes": [
    "scala.html"
  ],
  "name": "Twirl Template (HTML)",
  "patterns": [
    {
      "include": "#templateHeader"
    },
    {
      "include": "#expression"
    },
    {
      "include": "#paranthesesExpression"
    },
    {
      "include": "#bracketExpression"
    },
    {
      "include": "#blockContinuation"
    },
    {
      "include": "#caseExpression"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#escapedAt"
    },
    {
      "include": "#invalidAt"
    },
    {
      "begin": "(<)([a-zA-Z0-9:]++)(?=[^>]*><\/\\2>)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html"
        }
      },
      "end": "(>)(<)(\/)(\\2)(>)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.end.html"
        },
        "2": {
          "name": "punctuation.definition.tag.begin.html meta.scope.between-tag-pair.html"
        },
        "3": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "4": {
          "name": "entity.name.tag.html"
        },
        "5": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "name": "meta.tag.any.html",
      "patterns": [
        {
          "include": "#tag-stuff"
        }
      ]
    },
    {
      "begin": "(<\\?)(xml)",
      "captures": {
        "1": {
          "name": "punctuation.definition.tag.html"
        },
        "2": {
          "name": "entity.name.tag.xml.html"
        }
      },
      "end": "(\\?>)",
      "name": "meta.tag.preprocessor.xml.html",
      "patterns": [
        {
          "include": "#tag-generic-attribute"
        },
        {
          "include": "#string-double-quoted"
        },
        {
          "include": "#string-single-quoted"
        }
      ]
    },
    {
      "begin": "<!--",
      "captures": [
        {
          "name": "punctuation.definition.comment.html"
        }
      ],
      "end": "--\\s*>",
      "name": "comment.block.html",
      "patterns": [
        {
          "match": "--",
          "name": "invalid.illegal.bad-comments-or-CDATA.html"
        },
        {
          "include": "#embedded-code"
        }
      ]
    },
    {
      "begin": "<!",
      "captures": [
        {
          "name": "punctuation.definition.tag.html"
        }
      ],
      "end": ">",
      "name": "meta.tag.sgml.html",
      "patterns": [
        {
          "begin": "(?i:DOCTYPE)",
          "captures": {
            "1": {
              "name": "entity.name.tag.doctype.html"
            }
          },
          "end": "(?=>)",
          "name": "meta.tag.sgml.doctype.html",
          "patterns": [
            {
              "match": "\"[^\">]*\"",
              "name": "string.quoted.double.doctype.identifiers-and-DTDs.html"
            }
          ]
        },
        {
          "begin": "\\[CDATA\\[",
          "end": "]](?=>)",
          "name": "constant.other.inline-data.html"
        },
        {
          "match": "(\\s*)(?!--|>)\\S(\\s*)",
          "name": "invalid.illegal.bad-comments-or-CDATA.html"
        }
      ]
    },
    {
      "include": "#embedded-code"
    },
    {
      "begin": "(?:^\\s+)?(<)((?i:style))\\b(?![^>]*\/>)",
      "captures": {
        "1": {
          "name": "punctuation.definition.tag.html"
        },
        "2": {
          "name": "entity.name.tag.style.html"
        },
        "3": {
          "name": "punctuation.definition.tag.html"
        }
      },
      "end": "(<\/)((?i:style))(>)(?:\\s*\\n)?",
      "name": "source.css.embedded.html",
      "patterns": [
        {
          "include": "#tag-stuff"
        },
        {
          "begin": "(>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.html"
            }
          },
          "end": "(?=<\/(?i:style))",
          "patterns": [
            {
              "include": "#embedded-code"
            },
            {
              "include": "source.css"
            }
          ]
        }
      ]
    },
    {
      "begin": "(?:^\\s+)?(<)((?i:script))\\b(?![^>]*\/>)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.html"
        },
        "2": {
          "name": "entity.name.tag.script.html"
        }
      },
      "end": "(?<=<\/(script|SCRIPT))(>)(?:\\s*\\n)?",
      "endCaptures": {
        "2": {
          "name": "punctuation.definition.tag.html"
        }
      },
      "name": "source.js.embedded.html",
      "patterns": [
        {
          "include": "#tag-stuff"
        },
        {
          "begin": "(?<!<\/(?:script|SCRIPT))(>)",
          "captures": {
            "1": {
              "name": "punctuation.definition.tag.html"
            },
            "2": {
              "name": "entity.name.tag.script.html"
            }
          },
          "end": "(<\/)((?i:script))",
          "patterns": [
            {
              "captures": {
                "1": {
                  "name": "punctuation.definition.comment.js"
                }
              },
              "match": "(\/\/).*?((?=<\/script)|$\\n?)",
              "name": "comment.line.double-slash.js"
            },
            {
              "begin": "\/\\*",
              "captures": [
                {
                  "name": "punctuation.definition.comment.js"
                }
              ],
              "end": "\\*\/|(?=<\/script)",
              "name": "comment.block.js"
            },
            {
              "include": "#php"
            },
            {
              "include": "source.js"
            }
          ]
        }
      ]
    },
    {
      "begin": "(<\/?)((?i:body|head|html)\\b)",
      "captures": {
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.structure.any.html"
        }
      },
      "end": "(>)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "name": "meta.tag.structure.any.html",
      "patterns": [
        {
          "include": "#tag-stuff"
        }
      ]
    },
    {
      "begin": "(<\/?)((?i:address|blockquote|dd|div|dl|dt|fieldset|form|frame|frameset|h1|h2|h3|h4|h5|h6|iframe|noframes|object|ol|p|ul|applet|center|dir|hr|menu|pre)\\b)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.block.any.html"
        }
      },
      "end": "(>)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "name": "meta.tag.block.any.html",
      "patterns": [
        {
          "include": "#tag-stuff"
        }
      ]
    },
    {
      "begin": "(<\/?)((?i:a|abbr|acronym|area|b|base|basefont|bdo|big|br|button|caption|cite|code|col|colgroup|del|dfn|em|font|head|html|i|img|input|ins|isindex|kbd|label|legend|li|link|map|meta|noscript|optgroup|option|param|q|s|samp|script|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|var)\\b)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.inline.any.html"
        }
      },
      "end": "((?: ?\/)?>)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "name": "meta.tag.inline.any.html",
      "patterns": [
        {
          "include": "#tag-stuff"
        }
      ]
    },
    {
      "begin": "(<\/?)([a-zA-Z0-9:]+)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.other.html"
        }
      },
      "end": "(>)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "name": "meta.tag.other.html",
      "patterns": [
        {
          "include": "#tag-stuff"
        }
      ]
    },
    {
      "include": "#entities"
    },
    {
      "match": "<>",
      "name": "invalid.illegal.incomplete.html"
    },
    {
      "match": "<",
      "name": "invalid.illegal.bad-angle-bracket.html"
    }
  ],
  "repository": {
    "blockContinuation": {
      "begin": "\\}",
      "comment": "Block continuation",
      "end": "\\s*else\\s*\\{|\\s*\\{\\s*\\(?[_a-zA-Z0-9,]*\\)?\\s*=>|\\s*\\{|(?=[^()._a-zA-Z0-9]|[.](?=[^a-zA-Z]))",
      "name": "source.expression",
      "patterns": [
        {
          "include": "source.scala"
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "name": "source.expressionP",
          "patterns": [
            {
              "include": "$self"
            },
            {
              "include": "source.scala"
            }
          ]
        }
      ]
    },
    "bracketExpression": {
      "begin": "(@)\\{",
      "beginCaptures": {
        "1": {
          "name": "keyword.at"
        }
      },
      "comment": "Bracket expression",
      "end": "\\}",
      "name": "source.expression",
      "patterns": [
        {
          "include": "source.scala"
        },
        {
          "begin": "\\{",
          "end": "\\}",
          "name": "source.expressionP",
          "patterns": [
            {
              "include": "$self"
            },
            {
              "include": "source.scala"
            }
          ]
        }
      ]
    },
    "caseExpression": {
      "begin": "(?=case\\s+.*=>\\s*@?\\{)",
      "comment": "Case expression",
      "end": "=>\\s*(?=@\\{)|=>\\s*\\{",
      "name": "source.expression",
      "patterns": [
        {
          "include": "source.scala"
        }
      ]
    },
    "comment": {
      "begin": "@[*]",
      "comment": "Comment",
      "end": "[*]@",
      "name": "comment"
    },
    "embedded-code": {
      "patterns": [
        {
          "include": "#templateHeader"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#paranthesesExpression"
        },
        {
          "include": "#bracketExpression"
        },
        {
          "include": "#blockContinuation"
        },
        {
          "include": "#caseExpression"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#escapedAt"
        },
        {
          "include": "#invalidAt"
        }
      ]
    },
    "entities": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.entity.html"
            },
            "3": {
              "name": "punctuation.definition.entity.html"
            }
          },
          "match": "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)",
          "name": "constant.character.entity.html"
        },
        {
          "match": "&",
          "name": "invalid.illegal.bad-ampersand.html"
        }
      ]
    },
    "escapedAt": {
      "match": "@@",
      "name": "keyword.escapedAt"
    },
    "expression": {
      "begin": "(@)(?=[a-zA-Z])",
      "beginCaptures": {
        "1": {
          "name": "keyword.at"
        }
      },
      "comment": "Classical expression ($self is not working?)",
      "end": "\\s*\\s*\\s*=\\s*(\\{|\\s*(?=@\\{))|\\s*@?\\{\\s*\\(?[_a-zA-Z0-9,]*\\)?\\s*=>|\\s*\\{|(?=[^(._a-zA-Z0-9]|[.](?=[^a-zA-Z]))",
      "name": "source.expression",
      "patterns": [
        {
          "include": "source.scala"
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "name": "source.expression",
          "patterns": [
            {
              "include": "source.scala"
            },
            {
              "begin": "\\(",
              "end": "\\)",
              "name": "source.expression",
              "patterns": [
                {
                  "include": "source.scala"
                },
                {
                  "begin": "\\(",
                  "end": "\\)",
                  "name": "source.expression",
                  "patterns": [
                    {
                      "include": "source.scala"
                    },
                    {
                      "begin": "\\(",
                      "end": "\\)",
                      "name": "source.expression",
                      "patterns": [
                        {
                          "include": "source.scala"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "invalidAt": {
      "match": "@",
      "name": "invalid.illegal"
    },
    "paranthesesExpression": {
      "begin": "(@)\\(",
      "beginCaptures": {
        "1": {
          "name": "keyword.at"
        }
      },
      "comment": "Parentheses expression",
      "end": "\\)",
      "name": "source.expression",
      "patterns": [
        {
          "include": "source.scala"
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "name": "source.expressionP",
          "patterns": [
            {
              "include": "$self"
            },
            {
              "include": "source.scala"
            }
          ]
        }
      ]
    },
    "string-double-quoted": {
      "begin": "\"",
      "beginCaptures": [
        {
          "name": "punctuation.definition.string.begin.html"
        }
      ],
      "end": "\"",
      "endCaptures": [
        {
          "name": "punctuation.definition.string.end.html"
        }
      ],
      "name": "string.quoted.double.html",
      "patterns": [
        {
          "include": "#embedded-code"
        },
        {
          "include": "#entities"
        }
      ]
    },
    "string-single-quoted": {
      "begin": "'",
      "beginCaptures": [
        {
          "name": "punctuation.definition.string.begin.html"
        }
      ],
      "end": "'",
      "endCaptures": [
        {
          "name": "punctuation.definition.string.end.html"
        }
      ],
      "name": "string.quoted.single.html",
      "patterns": [
        {
          "include": "#embedded-code"
        },
        {
          "include": "#entities"
        }
      ]
    },
    "tag-generic-attribute": {
      "match": "\\b([a-zA-Z\\-:]+)",
      "name": "entity.other.attribute-name.html"
    },
    "tag-id-attribute": {
      "begin": "\\b(id)\\b\\s*(=)",
      "captures": {
        "1": {
          "name": "entity.other.attribute-name.id.html"
        },
        "2": {
          "name": "punctuation.separator.key-value.html"
        }
      },
      "end": "(?<='|\")",
      "name": "meta.attribute-with-value.id.html",
      "patterns": [
        {
          "begin": "\"",
          "beginCaptures": [
            {
              "name": "punctuation.definition.string.begin.html"
            }
          ],
          "contentName": "meta.toc-list.id.html",
          "end": "\"",
          "endCaptures": [
            {
              "name": "punctuation.definition.string.end.html"
            }
          ],
          "name": "string.quoted.double.html",
          "patterns": [
            {
              "include": "#embedded-code"
            },
            {
              "include": "#entities"
            }
          ]
        },
        {
          "begin": "'",
          "beginCaptures": [
            {
              "name": "punctuation.definition.string.begin.html"
            }
          ],
          "contentName": "meta.toc-list.id.html",
          "end": "'",
          "endCaptures": [
            {
              "name": "punctuation.definition.string.end.html"
            }
          ],
          "name": "string.quoted.single.html",
          "patterns": [
            {
              "include": "#embedded-code"
            },
            {
              "include": "#entities"
            }
          ]
        }
      ]
    },
    "tag-stuff": {
      "patterns": [
        {
          "include": "#tag-id-attribute"
        },
        {
          "include": "#tag-generic-attribute"
        },
        {
          "include": "#string-double-quoted"
        },
        {
          "include": "#string-single-quoted"
        },
        {
          "include": "#embedded-code"
        }
      ]
    },
    "templateHeader": {
      "begin": "(?<=\\A)(@)\\(",
      "beginCaptures": {
        "1": {
          "name": "keyword.at"
        }
      },
      "comment": "Template header",
      "end": "\\)(?=[^(])|\\Z",
      "name": "source.expression",
      "patterns": [
        {
          "include": "source.scala"
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "name": "source.expressionP",
          "patterns": [
            {
              "include": "$self"
            },
            {
              "include": "source.scala"
            }
          ]
        }
      ]
    }
  },
  "scopeName": "text.twirl",
  "uuid": "104e6558-306a-4264-8432-5db3d908c33e"
}
